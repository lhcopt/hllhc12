!-------------------------------HISTORY-----------------------------------------
!! S. Fartoukh Feb. 2009: macros for error generation in the new D1/IT
!  bug corrected in reset_MQX_corr 12/05/2009 (the IT correction was always on)
!! S. Fartoukh March 2012 update the error assignement routine for an arbitrary ref radius (defined in the error table) 
!  and the resetIT corrector routine for new IT correctors
!-------------------------------------------------------------------------------

ON_ALL_MULT: macro = {
 ON_A1s =  1 ; ON_A1r =  1 ; ON_B1s =  1 ; ON_B1r =  1;
 ON_A2s =  1 ; ON_A2r =  1 ; ON_B2s =  1 ; ON_B2r =  1;
 ON_A3s =  1 ; ON_A3r =  1 ; ON_B3s =  1 ; ON_B3r =  1;
 ON_A4s =  1 ; ON_A4r =  1 ; ON_B4s =  1 ; ON_B4r =  1;
 ON_A5s =  1 ; ON_A5r =  1 ; ON_B5s =  1 ; ON_B5r =  1;
 ON_A6s =  1 ; ON_A6r =  1 ; ON_B6s =  1 ; ON_B6r =  1;
 ON_A7s =  1 ; ON_A7r =  1 ; ON_B7s =  1 ; ON_B7r =  1;
 ON_A8s =  1 ; ON_A8r =  1 ; ON_B8s =  1 ; ON_B8r =  1;
 ON_A9s =  1 ; ON_A9r =  1 ; ON_B9s =  1 ; ON_B9r =  1;
 ON_A10s =  1; ON_A10r =  1; ON_B10s =  1; ON_B10r =  1;
 ON_A11s =  1; ON_A11r =  1; ON_B11s =  1; ON_B11r =  1;
 ON_A12s =  1; ON_A12r =  1; ON_B12s =  1; ON_B12r =  1;
 ON_A13s =  1; ON_A13r =  1; ON_B13s =  1; ON_B13r =  1;
 ON_A14s =  1; ON_A14r =  1; ON_B14s =  1; ON_B14r =  1;
 ON_A15s =  1; ON_A15r =  1; ON_B15s =  1; ON_B15r =  1;
};

define_uncertainty_mult(typm,nrj) : macro ={
b1ss_U  =  b1U_typm_nrj  * TGAUSS(1.5) / 1.5; a1ss_U  =  a1U_typm_nrj  * TGAUSS(1.5) / 1.5;
b2ss_U  =  b2U_typm_nrj  * TGAUSS(1.5) / 1.5; a2ss_U  =  a2U_typm_nrj  * TGAUSS(1.5) / 1.5;
b3ss_U  =  b3U_typm_nrj  * TGAUSS(1.5) / 1.5; a3ss_U  =  a3U_typm_nrj  * TGAUSS(1.5) / 1.5;
b4ss_U  =  b4U_typm_nrj  * TGAUSS(1.5) / 1.5; a4ss_U  =  a4U_typm_nrj  * TGAUSS(1.5) / 1.5;
b5ss_U  =  b5U_typm_nrj  * TGAUSS(1.5) / 1.5; a5ss_U  =  a5U_typm_nrj  * TGAUSS(1.5) / 1.5;
b6ss_U  =  b6U_typm_nrj  * TGAUSS(1.5) / 1.5; a6ss_U  =  a6U_typm_nrj  * TGAUSS(1.5) / 1.5;
b7ss_U  =  b7U_typm_nrj  * TGAUSS(1.5) / 1.5; a7ss_U  =  a7U_typm_nrj  * TGAUSS(1.5) / 1.5;
b8ss_U  =  b8U_typm_nrj  * TGAUSS(1.5) / 1.5; a8ss_U  =  a8U_typm_nrj  * TGAUSS(1.5) / 1.5;
b9ss_U  =  b9U_typm_nrj  * TGAUSS(1.5) / 1.5; a9ss_U  =  a9U_typm_nrj  * TGAUSS(1.5) / 1.5;
b10ss_U =  b10U_typm_nrj * TGAUSS(1.5) / 1.5; a10ss_U =  a10U_typm_nrj * TGAUSS(1.5) / 1.5;
b11ss_U =  b11U_typm_nrj * TGAUSS(1.5) / 1.5; a11ss_U =  a11U_typm_nrj * TGAUSS(1.5) / 1.5;
b12ss_U =  b12U_typm_nrj * TGAUSS(1.5) / 1.5; a12ss_U =  a12U_typm_nrj * TGAUSS(1.5) / 1.5;
b13ss_U =  b13U_typm_nrj * TGAUSS(1.5) / 1.5; a13ss_U =  a13U_typm_nrj * TGAUSS(1.5) / 1.5;
b14ss_U =  b14U_typm_nrj * TGAUSS(1.5) / 1.5; a14ss_U =  a14U_typm_nrj * TGAUSS(1.5) / 1.5;
b15ss_U =  b15U_typm_nrj * TGAUSS(1.5) / 1.5; a15ss_U =  a15U_typm_nrj * TGAUSS(1.5) / 1.5;
};

define_uncertainty(typm) : macro ={
!Define the uncertainty for a given magnet type typm and/or aperture
if (NRJ<4999.99){exec,define_uncertainty_mult(typm,inj);};
if (NRJ>4999.99){exec,define_uncertainty_mult(typm,col);};
};


new_magnetfamily_mult(typm,nrj) : macro ={
b1ss  = b1M_typm_nrj  + b1ss_U ; a1ss  = a1M_typm_nrj  +  a1ss_U ;
b2ss  = b2M_typm_nrj  + b2ss_U ; a2ss  = a2M_typm_nrj  +  a2ss_U ;
b3ss  = b3M_typm_nrj  + b3ss_U ; a3ss  = a3M_typm_nrj  +  a3ss_U ;
b4ss  = b4M_typm_nrj  + b4ss_U ; a4ss  = a4M_typm_nrj  +  a4ss_U ;
b5ss  = b5M_typm_nrj  + b5ss_U ; a5ss  = a5M_typm_nrj  +  a5ss_U ;
b6ss  = b6M_typm_nrj  + b6ss_U ; a6ss  = a6M_typm_nrj  +  a6ss_U ;
b7ss  = b7M_typm_nrj  + b7ss_U ; a7ss  = a7M_typm_nrj  +  a7ss_U ;
b8ss  = b8M_typm_nrj  + b8ss_U ; a8ss  = a8M_typm_nrj  +  a8ss_U ;
b9ss  = b9M_typm_nrj  + b9ss_U ; a9ss  = a9M_typm_nrj  +  a9ss_U ;
b10ss = b10M_typm_nrj + b10ss_U; a10ss = a10M_typm_nrj +  a10ss_U;
b11ss = b11M_typm_nrj + b11ss_U; a11ss = a11M_typm_nrj +  a11ss_U;
b12ss = b12M_typm_nrj + b12ss_U; a12ss = a12M_typm_nrj +  a12ss_U;
b13ss = b13M_typm_nrj + b13ss_U; a13ss = a13M_typm_nrj +  a13ss_U;
b14ss = b14M_typm_nrj + b14ss_U; a14ss = a14M_typm_nrj +  a14ss_U;
b15ss = b15M_typm_nrj + b15ss_U; a15ss = a15M_typm_nrj +  a15ss_U;
};

new_magnetfamily(typm) : macro ={
!Calculate the actual average (bn,an) of a given single bore magnet family typm 
!for a given seed and at a GIVEN NRJ given in the sample job
exec define_uncertainty(typm);

if (NRJ<4999.99){exec,new_magnetfamily_mult(typm,inj);};
if (NRJ>4999.99){exec,new_magnetfamily_mult(typm,col);};

};

new_magnetfamily_2in1(typm,nrj,mmmbbb,mmmqqq) : macro ={

b1ss_V1  = b1M_typm_V1_nrj  + b1ss_U ; a1ss_V1  = a1M_typm_V1_nrj  + a1ss_U ;
b2ss_V1  = b2M_typm_V1_nrj  + b2ss_U ; a2ss_V1  = a2M_typm_V1_nrj  + a2ss_U ;
b3ss_V1  = b3M_typm_V1_nrj  + b3ss_U ; a3ss_V1  = a3M_typm_V1_nrj  + a3ss_U ;
b4ss_V1  = b4M_typm_V1_nrj  + b4ss_U ; a4ss_V1  = a4M_typm_V1_nrj  + a4ss_U ;
b5ss_V1  = b5M_typm_V1_nrj  + b5ss_U ; a5ss_V1  = a5M_typm_V1_nrj  + a5ss_U ;
b6ss_V1  = b6M_typm_V1_nrj  + b6ss_U ; a6ss_V1  = a6M_typm_V1_nrj  + a6ss_U ;
b7ss_V1  = b7M_typm_V1_nrj  + b7ss_U ; a7ss_V1  = a7M_typm_V1_nrj  + a7ss_U ;
b8ss_V1  = b8M_typm_V1_nrj  + b8ss_U ; a8ss_V1  = a8M_typm_V1_nrj  + a8ss_U ;
b9ss_V1  = b9M_typm_V1_nrj  + b9ss_U ; a9ss_V1  = a9M_typm_V1_nrj  + a9ss_U ;
b10ss_V1 = b10M_typm_V1_nrj + b10ss_U; a10ss_V1 = a10M_typm_V1_nrj + a10ss_U;
b11ss_V1 = b11M_typm_V1_nrj + b11ss_U; a11ss_V1 = a11M_typm_V1_nrj + a11ss_U;
b12ss_V1 = b12M_typm_V1_nrj + b12ss_U; a12ss_V1 = a12M_typm_V1_nrj + a12ss_U;
b13ss_V1 = b13M_typm_V1_nrj + b13ss_U; a13ss_V1 = a13M_typm_V1_nrj + a13ss_U;
b14ss_V1 = b14M_typm_V1_nrj + b14ss_U; a14ss_V1 = a14M_typm_V1_nrj + a14ss_U;
b15ss_V1 = b15M_typm_V1_nrj + b15ss_U; a15ss_V1 = a15M_typm_V1_nrj + a15ss_U;

b1ss_V2  = b1M_typm_V2_nrj  + (mmmqqq)*b1ss_U ; a1ss_V2  = a1M_typm_V2_nrj  + (mmmbbb)*a1ss_U ;
b2ss_V2  = b2M_typm_V2_nrj  + (mmmbbb)*b2ss_U ; a2ss_V2  = a2M_typm_V2_nrj  + (mmmqqq)*a2ss_U ;
b3ss_V2  = b3M_typm_V2_nrj  + (mmmqqq)*b3ss_U ; a3ss_V2  = a3M_typm_V2_nrj  + (mmmbbb)*a3ss_U ;
b4ss_V2  = b4M_typm_V2_nrj  + (mmmbbb)*b4ss_U ; a4ss_V2  = a4M_typm_V2_nrj  + (mmmqqq)*a4ss_U ;
b5ss_V2  = b5M_typm_V2_nrj  + (mmmqqq)*b5ss_U ; a5ss_V2  = a5M_typm_V2_nrj  + (mmmbbb)*a5ss_U ;
b6ss_V2  = b6M_typm_V2_nrj  + (mmmbbb)*b6ss_U ; a6ss_V2  = a6M_typm_V2_nrj  + (mmmqqq)*a6ss_U ;
b7ss_V2  = b7M_typm_V2_nrj  + (mmmqqq)*b7ss_U ; a7ss_V2  = a7M_typm_V2_nrj  + (mmmbbb)*a7ss_U ;
b8ss_V2  = b8M_typm_V2_nrj  + (mmmbbb)*b8ss_U ; a8ss_V2  = a8M_typm_V2_nrj  + (mmmqqq)*a8ss_U ;
b9ss_V2  = b9M_typm_V2_nrj  + (mmmqqq)*b9ss_U ; a9ss_V2  = a9M_typm_V2_nrj  + (mmmbbb)*a9ss_U ;
b10ss_V2 = b10M_typm_V2_nrj + (mmmbbb)*b10ss_U; a10ss_V2 = a10M_typm_V2_nrj + (mmmqqq)*a10ss_U;
b11ss_V2 = b11M_typm_V2_nrj + (mmmqqq)*b11ss_U; a11ss_V2 = a11M_typm_V2_nrj + (mmmbbb)*a11ss_U;
b12ss_V2 = b12M_typm_V2_nrj + (mmmbbb)*b12ss_U; a12ss_V2 = a12M_typm_V2_nrj + (mmmqqq)*a12ss_U;
b13ss_V2 = b13M_typm_V2_nrj + (mmmqqq)*b13ss_U; a13ss_V2 = a13M_typm_V2_nrj + (mmmbbb)*a13ss_U;
b14ss_V2 = b14M_typm_V2_nrj + (mmmbbb)*b14ss_U; a14ss_V2 = a14M_typm_V2_nrj + (mmmqqq)*a14ss_U;
b15ss_V2 = b15M_typm_V2_nrj + (mmmqqq)*b15ss_U; a15ss_V2 = a15M_typm_V2_nrj + (mmmbbb)*a15ss_U;
};


new_magnetfamily_MB(typm) : macro ={

!Calculate the actual average (bn,an) of a given 2-in-1 dipole family type typm
!for a given seed and at a GIVEN NRJ given in the sample job

exec,define_uncertainty(typm);

yfact=-1;
if (NRJ<4999.99){exec,new_magnetfamily_2in1(typm,inj,$yfact,1);};
if (NRJ>4999.99){exec,new_magnetfamily_2in1(typm,col,$yfact,1);};
};

new_magnetfamily_MQ(typm) : macro ={

!Calculate the actual average (bn,an) of a given 2-in-1 quadrupole family type typm 
!for a given seed and at a GIVEN NRJ given in the sample job

exec,define_uncertainty(typm);

yfact=-1;
print,text="typm";
if (NRJ<4999.99){exec,new_magnetfamily_2in1(typm,inj,1,$yfact);};
if (NRJ>4999.99){exec,new_magnetfamily_2in1(typm,col,1,$yfact);};

};

new_magnetindividual_mult(typm,nrj) : macro ={
b1ssr   = 1E-4 * (ON_B1S  * b1ss   + ON_B1R  * b1R_typm_nrj   * TGAUSS(3.) );
b2ssr   = 1E-4 * (ON_B2S  * b2ss   + ON_B2R  * b2R_typm_nrj   * TGAUSS(3.) );
b3ssr   = 1E-4 * (ON_B3S  * b3ss   + ON_B3R  * b3R_typm_nrj   * TGAUSS(3.) );
b4ssr   = 1E-4 * (ON_B4S  * b4ss   + ON_B4R  * b4R_typm_nrj   * TGAUSS(3.) );
b5ssr   = 1E-4 * (ON_B5S  * b5ss   + ON_B5R  * b5R_typm_nrj   * TGAUSS(3.) );
b6ssr   = 1E-4 * (ON_B6S  * b6ss   + ON_B6R  * b6R_typm_nrj   * TGAUSS(3.) );
b7ssr   = 1E-4 * (ON_B7S  * b7ss   + ON_B7R  * b7R_typm_nrj   * TGAUSS(3.) );
b8ssr   = 1E-4 * (ON_B8S  * b8ss   + ON_B8R  * b8R_typm_nrj   * TGAUSS(3.) );
b9ssr   = 1E-4 * (ON_B9S  * b9ss   + ON_B9R  * b9R_typm_nrj   * TGAUSS(3.) );
b10ssr  = 1E-4 * (ON_B10S * b10ss  + ON_B10R * b10R_typm_nrj  * TGAUSS(3.) );
b11ssr  = 1E-4 * (ON_B11S * b11ss  + ON_B11R * b11R_typm_nrj  * TGAUSS(3.) );
b12ssr  = 1E-4 * (ON_B12S * b12ss  + ON_B12R * b12R_typm_nrj  * TGAUSS(3.) );
b13ssr  = 1E-4 * (ON_B13S * b13ss  + ON_B13R * b13R_typm_nrj  * TGAUSS(3.) );
b14ssr  = 1E-4 * (ON_B14S * b14ss  + ON_B14R * b14R_typm_nrj  * TGAUSS(3.) );
b15ssr  = 1E-4 * (ON_B15S * b15ss  + ON_B15R * b15R_typm_nrj  * TGAUSS(3.) );

a1ssr   = 1E-4 * (ON_A1S  * a1ss   + ON_A1R  * a1R_typm_nrj   * TGAUSS(3.) );
a2ssr   = 1E-4 * (ON_A2S  * a2ss   + ON_A2R  * a2R_typm_nrj   * TGAUSS(3.) );
a3ssr   = 1E-4 * (ON_A3S  * a3ss   + ON_A3R  * a3R_typm_nrj   * TGAUSS(3.) );
a4ssr   = 1E-4 * (ON_A4S  * a4ss   + ON_A4R  * a4R_typm_nrj   * TGAUSS(3.) );
a5ssr   = 1E-4 * (ON_A5S  * a5ss   + ON_A5R  * a5R_typm_nrj   * TGAUSS(3.) );
a6ssr   = 1E-4 * (ON_A6S  * a6ss   + ON_A6R  * a6R_typm_nrj   * TGAUSS(3.) );
a7ssr   = 1E-4 * (ON_A7S  * a7ss   + ON_A7R  * a7R_typm_nrj   * TGAUSS(3.) );
a8ssr   = 1E-4 * (ON_A8S  * a8ss   + ON_A8R  * a8R_typm_nrj   * TGAUSS(3.) );
a9ssr   = 1E-4 * (ON_A9S  * a9ss   + ON_A9R  * a9R_typm_nrj   * TGAUSS(3.) );
a10ssr  = 1E-4 * (ON_A10S * a10ss  + ON_A10R * a10R_typm_nrj  * TGAUSS(3.) );
a11ssr  = 1E-4 * (ON_A11S * a11ss  + ON_A11R * a11R_typm_nrj  * TGAUSS(3.) );
a12ssr  = 1E-4 * (ON_A12S * a12ss  + ON_A12R * a12R_typm_nrj  * TGAUSS(3.) );
a13ssr  = 1E-4 * (ON_A13S * a13ss  + ON_A13R * a13R_typm_nrj  * TGAUSS(3.) );
a14ssr  = 1E-4 * (ON_A14S * a14ss  + ON_A14R * a14R_typm_nrj  * TGAUSS(3.) );
a15ssr  = 1E-4 * (ON_A15S * a15ss  + ON_A15R * a15R_typm_nrj  * TGAUSS(3.) );
};


choose_magnet_ap(iap):  macro ={
b1ss  = b1ss_Viap ;a1ss  = a1ss_Viap ;
b2ss  = b2ss_Viap ;a2ss  = a2ss_Viap ;
b3ss  = b3ss_Viap ;a3ss  = a3ss_Viap ;
b4ss  = b4ss_Viap ;a4ss  = a4ss_Viap ;
b5ss  = b5ss_Viap ;a5ss  = a5ss_Viap ;
b6ss  = b6ss_Viap ;a6ss  = a6ss_Viap ;
b7ss  = b7ss_Viap ;a7ss  = a7ss_Viap ;
b8ss  = b8ss_Viap ;a8ss  = a8ss_Viap ;
b9ss  = b9ss_Viap ;a9ss  = a9ss_Viap ;
b10ss = b10ss_Viap;a10ss = a10ss_Viap;
b11ss = b11ss_Viap;a11ss = a11ss_Viap;
b12ss = b12ss_Viap;a12ss = a12ss_Viap;
b13ss = b13ss_Viap;a13ss = a13ss_Viap;
b14ss = b14ss_Viap;a14ss = a14ss_Viap;
b15ss = b15ss_Viap;a15ss = a15ss_Viap;
};



new_magnetindividual(typm,iap) : macro ={

!Calculate the actual (bn,an) of a given magnet belonging to family typm
!for a given seed and at a GIVEN NRJ given in the sample job
!iap=0/1/2 for single bore/outer/inner

iapaux=iap;

if(iapaux==0) {print,text="single bore magnet";};
if(iapaux==1) {print,text="2-in-1 magnet: outer channel";};
if(iapaux==2) {print,text="2-in-1 magnet: inner channel";};

if(iapaux>0){ exec,choose_magnet_ap($iapaux); };

if (NRJ<4999.99){ exec,new_magnetindividual_mult(typm,inj);};
if (NRJ>4999.99){ exec,new_magnetindividual_mult(typm,col);};

!value,b1ssr,b2ssr,b3ssr,b4ssr,b5ssr,b6ssr,b7ssr,b8ssr,
!      b9ssr,b10ssr,b11ssr,b12ssr,b13ssr,b14ssr,b15ssr,
!      a1ssr,a2ssr,a3ssr,a4ssr,a5ssr,a6ssr,a7ssr,a8ssr,
!      a9ssr,a10ssr,a11ssr,a12ssr,a13ssr,a14ssr,a15ssr;
};

errorgenerate_dip(typm) : macro ={
is_inv=0;order=0;
exec, errorgenerate_rel(typm,$is_inv,$order);
};

errorgenerate_dip_inv(typm) : macro ={
is_inv=1;order=0;
exec, errorgenerate_rel(typm,$is_inv,$order);
};

errorgenerate_quad(typm) : macro ={
is_inv=0;order=1;
exec, errorgenerate_rel(typm,$is_inv,$order);
};

errorgenerate_quad_inv(typm) : macro ={
is_inv=1;order=1;
exec, errorgenerate_rel(typm,$is_inv,$order);
};

errorgenerate_rel(typm,is_inv,ooo) : macro ={
!ooo order of the reference multipole using madx convention B/A1 -> 0, B2/A2 ->1

Rref=Rr_typm;value,Rref;

if (mylhcbeam==4) {is_beam4=1;} else {is_beam4=0;};
if (rref/(abs(rref))==-1) {is_skew=1;} else {is_skew=0;};

yfact=(-1)^(magnetic_sign+is_beam4+is_inv); ! number of x-sign flips
aaa=1;bbb=1;
if (yfact==-1){ ! odd x-sign flips
   aaa=-aaa;bbb=bbb; ! a1,b2,... change signs
   sign=(-1)^(is_skew+ooo); ! -1 if A1, B2 are main fields
   aaa=sign*aaa;bbb=sign*bbb; ! change all signs in case A1, B2 are main fields
};


Efcomp, radius = Rref, order= ooo,
dknr:={bbb*b1ssr ,aaa*b2ssr ,bbb*b3ssr ,aaa*b4ssr ,bbb*b5ssr,
      aaa*b6ssr, bbb*b7ssr ,aaa*b8ssr ,bbb*b9ssr ,aaa*b10ssr,
      bbb*b11ssr,aaa*b12ssr,bbb*b13ssr,aaa*b14ssr,bbb*b15ssr},
dksr:={aaa*a1ssr ,bbb*a2ssr ,aaa*a3ssr ,bbb*a4ssr ,aaa*a5ssr,
      bbb*a6ssr, aaa*a7ssr ,bbb*a8ssr ,aaa*a9ssr ,bbb*a10ssr,
      aaa*a11ssr,bbb*a12ssr,aaa*a13ssr,bbb*a14ssr,aaa*a15ssr};
};

errorgenerate_abs(typm,is_inv,ooo,klref): macro={
!magnetic measurement conventions: `magnetic_sign`=1
!apply sign change to mesaured field quality when beam 1 (or2)  enters in
!aperture from connection side
!don't apply changes to mesaured field quality when beam 4 exit from connection sidea
!order 0: dipole, 1: quadrupole, etc...
!minus sign reference radius if An is the main field

rref=Rr_typm;value,rref;

    ! There are 3 effects that cause a sign flip: beam4, an inverted magnet
    ! (connection side opposite to beam direction), and the magnetic convention.
    ! These three are combined in yfact
if (mylhcbeam==4) {is_beam4=1;} else {is_beam4=0;};
yfact=(-1)^(magnetic_sign+is_beam4+is_inv);           ! number of x-sign flips
    ! If we have an odd number of sign flips (yfact=-1),
    ! then we change the appropriate multipoles (odd an, even bn) 
aaa=yfact;
bbb=1;

    ! In case of a sign flip, the main field changes sign as well if skew
    ! and even order (order from KL) or if regular and odd order. Eg. A1, B2, ...
    ! Instead of changing the main field sign, we change all multipoles.
    ! However, in case of Beam 4, we shouldn't change signs as this is then
    ! already done in optics (due to the bv_aux flag), unless we define the
    ! main field separately in which case we have to multiply it with bv_aux
    ! in its error routine (eg MCBXF).
    ! Skew main fields are recognised by a negative reference radius.
if (rref/(abs(rref))==-1) {is_skew=1;} else {is_skew=0;};     ! Skew main field
rref=abs(rref);
yfactref=(-1)^(magnetic_sign+is_inv);
if (yfactref==-1){ ! odd x-sign flips
   sign=(-1)^(is_skew+ooo);  ! -1 if A1, B2 are main fields
   aaa=sign*aaa;             ! change all signs in case A1, B2 are main fields
   bbb=sign*bbb;
};

erfact1=klref*(rref)^(ooo);
erfact2=erfact1*1/rref;
erfact3=erfact2*2/rref; erfact4=erfact3*3/rref;
erfact5=erfact4*4/rref; erfact6=erfact5*5/rref;
erfact7=erfact6*6/rref; erfact8=erfact7*7/rref;
erfact9=erfact8*8/rref; erfact10=erfact9*9/rref;
erfact11=erfact10*10/rref; erfact12=erfact11*11/rref;
erfact13=erfact12*12/rref; erfact14=erfact13*13/rref;
erfact15=erfact14*14/rref;

efcomp,
dkn:={ bbb*b1ssr*erfact1,  aaa*b2ssr*erfact2,  bbb*b3ssr*erfact3 ,
       aaa*b4ssr*erfact4,  bbb*b5ssr*erfact5,  aaa*b6ssr*erfact6 ,
       bbb*b7ssr*erfact7,  aaa*b8ssr*erfact8,  bbb*b9ssr*erfact9 ,
       aaa*b10ssr*erfact10,bbb*b11ssr*erfact11,aaa*b12ssr*erfact12,
       bbb*b13ssr*erfact13,aaa*b14ssr*erfact14,bbb*b15ssr*erfact15},
dks:={ aaa*a1ssr*erfact1,  bbb*a2ssr*erfact2,  aaa*a3ssr*erfact3 ,
       bbb*a4ssr*erfact4,  aaa*a5ssr*erfact5,  bbb*a6ssr*erfact6 ,
       aaa*a7ssr*erfact7,  bbb*a8ssr*erfact8,  aaa*a9ssr*erfact9 ,
       bbb*a10ssr*erfact10,aaa*a11ssr*erfact11,bbb*a12ssr*erfact12,
       aaa*a13ssr*erfact13,bbb*a14ssr*erfact14,aaa*a15ssr*erfact15 };
};




show_error_newHLmagnet : macro ={
select,flag=error,clear;
select,flag=error,pattern="^MBXA\..*\.\..*$";
select,flag=error,pattern="^MBXB\..*\.\..*$";
select,flag=error,pattern="^MBRD\..*\.\..*$";
select,flag=error,pattern="^MQXC\..*\.\..*$";
select,flag=error,pattern="^MQXD\..*\.\..*$";
select,flag=error,pattern="^MQXFA\..*\.\..*$";
select,flag=error,pattern="^MQXFB\..*\.\..*$";
select,flag=error,pattern="^MCBXFA\..*\.\..*$";
select,flag=error,pattern="^MCBXFB\..*\.\..*$";
select,flag=error,pattern="^MQYY\..*\.\..*$";
select,flag=error,pattern="^MQYL\..*\.\..*$";
select,flag=error,pattern="^MBH\..*\.\..*$";
esave;
};

reset_MB_corr : macro ={

if(mylhcbeam==1)
{
system," echo 'Reset settings of all arc correctors for beam 1'";
dKQTF.a12b1:=0.;dKQTD.a12b1:=0.;
dKQTF.a23b1:=0.;dKQTD.a23b1:=0.;
dKQTF.a34b1:=0.;dKQTD.a34b1:=0.;
dKQTF.a45b1:=0.;dKQTD.a45b1:=0.;
dKQTF.a56b1:=0.;dKQTD.a56b1:=0.;
dKQTF.a67b1:=0.;dKQTD.a67b1:=0.;
dKQTF.a78b1:=0.;dKQTD.a78b1:=0.;
dKQTF.a81b1:=0.;dKQTD.a81b1:=0.;

KQS.A23b1:=0.;
KQS.A45b1:=0.;
KQS.A67b1:=0.;
KQS.A81b1:=0.;
KQS.R1b1:=0;KQS.L2b1:=0.;
KQS.R3b1:=0;KQS.L4b1:=0.;
KQS.R5b1:=0;KQS.L6b1:=0.;
KQS.R7b1:=0;KQS.L8b1:=0.;

KSS.a12b1:=0.;KCS.a12b1:=0.;KCO.a12b1:=0.;KCD.a12b1:=0.;
KSS.a23b1:=0.;KCS.a23b1:=0.;KCO.a23b1:=0.;KCD.a23b1:=0.;
KSS.a34b1:=0.;KCS.a34b1:=0.;KCO.a34b1:=0.;KCD.a34b1:=0.;
KSS.a45b1:=0.;KCS.a45b1:=0.;KCO.a45b1:=0.;KCD.a45b1:=0.;
KSS.a56b1:=0.;KCS.a56b1:=0.;KCO.a56b1:=0.;KCD.a56b1:=0.;
KSS.a67b1:=0.;KCS.a67b1:=0.;KCO.a67b1:=0.;KCD.a67b1:=0.;
KSS.a78b1:=0.;KCS.a78b1:=0.;KCO.a78b1:=0.;KCD.a78b1:=0.;
KSS.a81b1:=0.;KCS.a81b1:=0.;KCO.a81b1:=0.;KCD.a81b1:=0.;
};

if(mylhcbeam > 1)
{
system," echo 'Reset settings of all arc correctors for beam 2/4'";
dKQTF.a12b2:=0.;dKQTD.a12b2:=0.;
dKQTF.a23b2:=0.;dKQTD.a23b2:=0.;
dKQTF.a34b2:=0.;dKQTD.a34b2:=0.;
dKQTF.a45b2:=0.;dKQTD.a45b2:=0.;
dKQTF.a56b2:=0.;dKQTD.a56b2:=0.;
dKQTF.a67b2:=0.;dKQTD.a67b2:=0.;
dKQTF.a78b2:=0.;dKQTD.a78b2:=0.;
dKQTF.a81b2:=0.;dKQTD.a81b2:=0.;

KQS.A12b2:=0.;
KQS.A34b2:=0.;
KQS.A56b2:=0.;
KQS.A78b2:=0.;
KQS.R2b2:=0;KQS.L3b2:=0.;
KQS.R4b2:=0;KQS.L5b2:=0.;
KQS.R6b2:=0;KQS.L7b2:=0.;
KQS.R8b2:=0;KQS.L1b2:=0.;

KSS.a12b2:=0.;KCS.a12b2:=0.;KCO.a12b2:=0.;KCD.a12b2:=0.;
KSS.a23b2:=0.;KCS.a23b2:=0.;KCO.a23b2:=0.;KCD.a23b2:=0.;
KSS.a34b2:=0.;KCS.a34b2:=0.;KCO.a34b2:=0.;KCD.a34b2:=0.;
KSS.a45b2:=0.;KCS.a45b2:=0.;KCO.a45b2:=0.;KCD.a45b2:=0.;
KSS.a56b2:=0.;KCS.a56b2:=0.;KCO.a56b2:=0.;KCD.a56b2:=0.;
KSS.a67b2:=0.;KCS.a67b2:=0.;KCO.a67b2:=0.;KCD.a67b2:=0.;
KSS.a78b2:=0.;KCS.a78b2:=0.;KCO.a78b2:=0.;KCD.a78b2:=0.;
KSS.a81b2:=0.;KCS.a81b2:=0.;KCO.a81b2:=0.;KCD.a81b2:=0.;
};

};

reset_MQX_corr : macro ={

system," echo 'Reset settings of all triplet correctors'";
!a2
KQSXF.L1:=0;KQSXF.R1:=0;
KQSXF.L2:=0;KQSXF.R2:=0;
KQSXF.L5:=0;KQSXF.R5:=0;
KQSXF.L8:=0;KQSXF.R8:=0;
!a3
KCSSXF.L1:=0;KCSSXF.R1:=0;
KCSSXF.L2:=0;KCSSXF.R2:=0;
KCSSXF.L5:=0;KCSSXF.R5:=0;
KCSSXF.L8:=0;KCSSXF.R8:=0;
!a4
KCOSXF.L1:=0;KCOSXF.R1:=0;
KCOSXF.L2:=0;KCOSXF.R2:=0;
KCOSXF.L5:=0;KCOSXF.R5:=0;
KCOSXF.L8:=0;KCOSXF.R8:=0;
!a5
KCDSXF.L1:=0;KCDSXF.R1:=0;
KCDSXF.L2:=0;KCDSXF.R2:=0; ! DO NOT EXIST
KCDSXF.L5:=0;KCDSXF.R5:=0;
KCDSXF.L8:=0;KCDSXF.R8:=0; ! DO NOT EXIST
!a6
KCTSXF.L1:=0;KCTSXF.R1:=0;
KCTSXF.L2:=0;KCTSXF.R2:=0; ! DO NOT EXIST
KCTSXF.L5:=0;KCTSXF.R5:=0;
KCTSXF.L8:=0;KCTSXF.R8:=0; ! DO NOT EXIST
!b3
KCSXF.L1:=0;KCSXF.R1:=0;
KCSXF.L2:=0;KCSXF.R2:=0;
KCSXF.L5:=0;KCSXF.R5:=0;
KCSXF.L8:=0;KCSXF.R8:=0;
!b4
KCOXF.L1:=0;KCOXF.R1:=0;
KCOXF.L2:=0;KCOXF.R2:=0;
KCOXF.L5:=0;KCOXF.R5:=0;
KCOXF.L8:=0;KCOXF.R8:=0;
!b5
KCDXF.L1:=0;KCDXF.R1:=0;
KCDXF.L2:=0;KCDXF.R2:=0; ! DO NOT EXIST
KCDXF.L5:=0;KCDXF.R5:=0;
KCDXF.L8:=0;KCDXF.R8:=0; ! DO NOT EXIST
!b6
KCTXF.L1:=0;KCTXF.R1:=0;
KCTXF.L2:=0;KCTXF.R2:=0;
KCTXF.L5:=0;KCTXF.R5:=0;
KCTXF.L8:=0;KCTXF.R8:=0;

};
